[{"title":"vscode插件开发笔记","url":"/2019/08/20/vscode插件开发笔记/","content":"1. 总结：\n    > 开发vscode插件其实就是在写node，只是在需要与编辑器交互的时候，调用以下vscode提供的事件回调\n2. 常用回调事件：\n    | Tables   |      Are      |  Cool |\n    |----------|:-------------:|------:|\n    | col 1 is |  left-aligned | $1600 |\n    | col 2 is |    centered   |   $12 |\n    | col 3 is | right-aligned |    $1 |\n\n\n    |事件|解释|\n    |-----|-----|\n    |vscode.commands.registerCommand|接收到命令时|\n    |vscode.commands.registerTextEditorCommand|在编辑器界面接收到命令时|\n    |vscode.workspace.onDidChangeTextDocument|工作区文档改变时|\n    |vscode.workspace.onDidSaveTextDocument|工作区文档保存时|\n\n3. 写法：\n    1. 官方推荐使用`yo code`自动构建项目框架，构建完成后再debug页面点击开始按钮即可调试示例插件\n    2. 如果仅仅想做简单的配置，其实只需要创建三个文件即可，分别是合并了manifest.json的package.json，处理事件的extension.js和用于调试的.vscode/launch.json\n        1. package.json中应该含有：\n\n\n            key|value\n            :-|:-\n            name|插件的名字\n            engines|插件支持的最低vscode版本\n            activationEvents|何时启动插件(可以写\"*\")\n            contributes|注册指令\n        2. extension.js中应该暴露两个出口，分别是activate和deactivate，代表插件开始运行和插件释放，所有注册类指令都需要push在activate中的context.subscriptions中\n        3. .vscode/launch.json中应该写入：\n            ```\n            {\n                \"version\": \"0.2.0\",\n                \"configurations\": [\n                    {\n                        \"name\": \"启动扩展\",\n                        \"type\": \"extensionHost\",\n                        \"request\": \"launch\",\n                        \"runtimeExecutable\": \"${execPath}\",\n                        \"args\": [\n                            \"--extensionDevelopmentPath=${workspaceFolder}\"\n                        ]\n                    }\n                ]\n            }\n            ```\n4. 其他\n    1. 打包时应该使用`npm i vsce -g`安装vsce打包工具，之后在根目录运行`vsce package`\n    2. vscode的插件中Position声明方式应该是`new vscode.Position()`同理Range的声明方式是`new vscode.Range()`\n    3. contributes.commands中注册的指令可以是任何字符串名称\n    4. 希望在package.json中配置icon时，应该设置另一个属性：\n        ```\n        \"repository\": {\n            \"type\": \"git\",\n            \"url\": \"https://github.com/netsssss\"\n        },\n        ```\n        否则设置icon会提示有错误\n    5. 当遇到在百度中难以查到的问题时，比如`vscode command 'xxx' not found`时，应该是自己的操作有问题，尝试使用菜单栏的`帮助->切换开发人员工具`来查看错误原因\n    6. 插件开发时可以直接require('vscode')，不需要npm安装\n","tags":["插件"]},{"title":"css编入集","url":"/2019/08/18/css编入集/","content":"### 1. 盒子模型\n> 1. 每一个元素都会带有宽高属性，即使高度为0\n>\n> 2. 元素默认的margin，padding，border值为0\n>\n> 3. **margin可以设置负值**\n> > 1. 当块元素没有设定宽度时，负left和right会增加左边或右边的宽度\n> > 2. 设置负top时会向上移动\n> > 3. 设置负bottom时会向上移动并减少元素的css读取高度(缩减了元素的content区域)\n> \n> 4. **box-sizing拥有两个常用属性**\n> > 1. content-box(默认): 宽度不包括border和padding\n> > 2. border-box(IE默认): 宽度包括border和padding","tags":["css"]},{"title":"温故而知新","url":"/2019/06/27/温故而知新/","content":"<b>1</b> 函数防抖，使用settimeout和在延时时间内cleartimeout实现使函数只执行一次<br>\n<b>2</b> 函数节流，使用时间戳判断连续触发的函数是否可以执行<br>\n<b>3</b> error-first，是一种通用的可依赖的回调方式，规则有两个，一是第一个参数返回的是错误对象，二是，第二个参数是成功响应的数据，第一个参数没有错误应设置为null<br>\n<b>4</b> promise，能够解决多层嵌套回调时代码可读性变差，复用性降低的问题，它是一个对象，能返回一个then方法，代表一个操作的结果可能还没有或不知道，无论谁访问这个对象，都能够使用then方法加入回调，等待操作出现成功或失败的提醒通知，then方法有两个返回值，第一个代表成功，第二个代表失败。.then总是返回一个新的promise<br>\n<b>5</b> 如何防止xss攻击，给header设置httponly，但是httponly只能防止cookie被js读取，不能防止写入，这样，如果cookie存的是登录凭证的话，攻击者就可以用自己的sessionId代替被攻击者的sessionId，被攻击者不知道自己的账号被换了，如果做一些敏感操作的时候，信息就会泄露给攻击者。所以在输入内容上最好也加以限制，把特殊符号转化成url编码，输出的时候再以文本的形式转换回来。<br>\n<b>6</b> 数据校验时间应相同，因为node使用v8引擎，v8引擎在校验数据时是使用字节校验，一旦不一致就会立即停止，所以校验时间越长，就说明正确的数据越多，攻击者会利用这个破解密码<br>\n<b>7</b> 数据校验时间应相同，因为node使用v8引擎，v8引擎在校验数据时是使用字节校验，一旦不一致就会立即停止，所以校验时间越长，就说明正确的数据越多，攻击者会利用这个破解密码<br>\n","tags":["面试"]},{"title":"状态码解释","url":"/2019/06/27/状态码解释/","content":"\n### 状态码\n---\n200 成功<br><br>\n300 重定向<br><br>\n400 服务器不理解，一般是前端发送的和后端想接收的字段不对应<br>\n401 登录凭证不被允许，一般是服务器设置了访问权限<br>\n403 没有权限，一般是服务器设置的访问权限，可以用404代替<br>\n404 没找到，一般是路径写错了<br>\n405 方法不允许，一般是post和get的问题<br><br>\n500 服务器内部错误，一般是代码不通，或者部分服务器没开<br>\n502 服务器作为代理服务器，上游服务器无响应<br>\n503服务器过载，一般是并发太大了<br>\n504 请求超时，服务器作为代理服务器，上游服务器没有及时响应<br>\n505 http版本不支持<br>","tags":["http"]},{"title":"ie和chrome显示图片清晰度不一致的解决办法","url":"/2018/11/10/ie和chrome显示图片清晰度不一致的解决办法/","content":"\n#### 变得同样清晰\n[image-rendering](https://developer.mozilla.org/zh-CN/docs/Web/CSS/image-rendering)\n\n出现这种情况主要是因为 Chrome 默认对图片做了反锯齿。而IE没做，所以感觉上IE出现了“更清晰”感觉。\n\n给图片css加上 image-rendering: pixelated; 就可以同样清晰了。\n\n#### 变得同样模糊\n```\n<svg width=\"500\" height=\"500\">\n  <filter id=\"blurMe\">\n    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"3\" />\n  </filter>\n  <image filter=\"url(#blurMe)\" width=\"100%\" height=\"100%\" xlink:href=\"https://netsssss.github.io/img/avatar.jpg\" alt=\"\"  />\n</svg>\n```","tags":["css"]},{"title":"关于前后端同构","url":"/2018/11/10/关于前后端同构/","content":"\n#### 首先理解一些概念\n\n1. <b>前端渲染：</b>浏览器一侧使用js，借助模版或vue、react、angular等框架做的DOM结构生成。\n\n2. <b>后端渲染：</b>服务器一侧，使用php、nodejs等技术实现DOM结构生成，并在HTTP请求中返回给浏览器。\n\n3. <b>同构：</b>浏览器一侧的JS、HTML和服务器一侧使用的JS、HTML使用同样的开发结构，同样的开发思路，同样的开发模式，尽可能实现代码复用。\n\n#### 主要解决的问题\n\n##### 单页面应用(SPA)\n1. 首先是SEO, 前端渲染页面会导致搜索引擎的爬虫难以爬取(现在谷歌爬虫已经加入了运行js的功能, 但还是不能顺其自然), 前后端同构解决的就是这一种, 因为后端渲染的原因完美解决了SEO的问题.\n\n\n2. 而且单页面应用一般需要一次性下载大量的js, 虽然可以按需加载但是仍然很影响性能, 前后端同构解决的另一个问题就是后端渲染首屏, 因为js是放在服务器里的, 所以渲染速度要比前端渲染快得多, 后端渲染首屏后前端再将没有加载的模块异步加载进来.","tags":["闲聊"]},{"title":"git小课堂","url":"/2018/11/09/git小课堂/","content":"\n#### 1.直接 [官网下载](https://git-scm.com/downloads) 安装\n\n#### 2.安装完成后随便哪里右键打开git bash输入：\n```\n$ git config --global user.name \"{{你的名字}}\"\n$ git config --global user.email \"{{你的邮箱}}\"\n```\n\n#### 3.github新建一个repo(右上角小加号第一个)，复制界面内显示的HTTPS连接\n\n#### 4.本地新建一个文件夹输入如下指令\n\n创建一个新文件README.md并写入文字“test”\n```\necho \"# test\" >> README.md\n```\n初始化git\n```\ngit init\n```\n将README.md填入暂存区\n```\ngit add README.md\n```\n将暂存区内容提交到本地仓库并备注“first commit”\n```\ngit commit -m \"first commit\"\n```\n新建一个git链接(仅第一次提交需要)\n```\ngit remote add origin {{你的新repo的HTTPS连接}}\n```\n将本地仓库提交到远程仓库的master分支(默认分支)\n```\ngit push -u origin master\n```\n\n#### 5.回到github刷新一下新repo会惊现一个README\n\n#### ps:添加文件夹中包含的全部未提交的文件和文件夹到暂存区\n```\ngit add .\n```","tags":["git"]},{"title":"Nginx小课堂","url":"/2018/11/09/Nginx小课堂/","content":"\n### 1.环境准备\n\n我的系统是 <b>CentOS 7.3 64位</b>\n\n#### Nginx安装前需要的必要程序\n```\nyum -y install gcc gcc-c++ autoconf pcre-devel make automake\nyum -y install wget httpd-tools vim\n```\n\n### 2.快速搭建\n\n#### 检查yum是否已经存在\n```\nyum list | grep nginx\n```\n上 [官网](http://nginx.org/) 看看，如果现有版本比较低，可以用下面的命令升级一下版本\n\n在终端输入：\n```\nvim /etc/yum.repos.d/nginx.repo\n```\n\n粘贴如下代码：\n```\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/centos/7/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n#### 安装\n```\nyum install nginx\n```\n\n#### 查看版本号\n```\nnginx -v\n```\n\n#### 在云服务器提供商打开80端口\n\n阿里云设置步骤如下：\n```\n进入阿里云控制台，并找到ECS实例。\n点击实例后边的“更多”\n点击“网络和安全组” ，再点击“安全组配置”\n右上角添加“安全组配置”\n进行80端口的设置，具体设置如图就好。\n```\n\n这时浏览器访问服务器ip地址可以看到nginx欢迎界面\n\n### 3.启动停止重启\n\n#### 启动\n```\nnginx\n```\n\n#### 停止\n```\nnginx -s -quit\n```\n或\n```\nnginx -s -stop\n```\n\n#### 重载配置文件\n```\nnginx -s reload\n```\n\n#### 查看端口号占用情况\n```\nnetstat -tlnp\n```\n\n### 4.虚拟主机\n\n#### 基于端口号配置虚拟主机\n\n新建配置文件\n```\nvim /etc/nginx/conf.d/myprot1.conf\n```\n\n粘贴代码：\n```\nserver{\n        listen 8001;\n        server_name localhost;\n        root /usr/share/nginx/html/html8001;\n        index index.html;\n}\n```\n\n创建8001端口对应的index.html\n```\nvim /usr/share/nginx/html/html8001/index.html\n```\n\n粘贴代码：\n```\n<h1>welcome port 8001</h1>\n```\n\n浏览器访问服务器ip + :8001 即可打开8001端口对应的index.html\n\n#### 基于ip配置虚拟主机\n\n打开默认配置文件：\n```\nvim /etc/nginx/conf.d/default.conf\n```\n\n修改为：\n```\nserver{\n        listen 80;\n        server_name {{另一个服务器ip}};\n        root /usr/share/nginx/html/html8001;\n        index index.html;\n}\n```\n\n#### 基于域名配置虚拟主机\n\n1. 对域名进行解析\n\n2. 其他同基于端口，只是把myport1中代码改成\n```\nserver{\n        listen 80;\n        server_name {{你的域名}};\n        location / {\n                root /usr/share/nginx/html/html8001;\n                index index.html index.htm;\n        }\n}\n```\n\n### 5.反向代理\n\n#### 反向代理的用途和好处\n\n<b>安全性：</b>正向代理的客户端能够在隐藏自身信息的同时访问任意网站，这个给网络安全代理了极大的威胁。因此，我们必须把服务器保护起来，使用反向代理客户端用户只能通过外来网来访问代理服务器，并且用户并不知道自己访问的真实服务器是那一台，可以很好的提供安全保护。\n\n<b>功能性：</b>反向代理的主要用途是为多个服务器提供负债均衡、缓存等功能。负载均衡就是一个网站的内容被部署在若干服务器上，可以把这些机子看成一个集群，那Nginx可以将接收到的客户端请求“均匀地”分配到这个集群中所有的服务器上，从而实现服务器压力的平均分配，也叫负载均衡。\n\n#### 简单实现\n\n打开myprot1\n```\nvim /etc/nginx/conf.d/myprot1.conf\n```\n\n修改为：\n```\nserver{\n        listen 80;\n        server_name {{你的域名}};\n        location / {\n               proxy_pass {{需要反向代理的域名}};\n        }\n}\n```\n#### 其他反向代理的指令\n```\nproxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。\n\nproxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。\n\nproxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。\n\nproxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。\n\nproxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。\n```\n\n### 6.识别PC和移动端\n\n修改myport1：\n```\nserver{\n     listen 80;\n     server_name {{你的域名}};\n     location / {\n      root {{电脑端文件夹路径}};\n      if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {\n         root {{手机端文件夹路径}};\n      }\n      index index.html;\n     }\n}\n```\n注意文件夹不要放在 /root 目录下，不然会权限不足.\n\n### 7.Gzip压缩\n\n打开nginx.conf\n\n修改 gzip 为 on\n```\nhttp {\n   .....\n    gzip on;\n    gzip_types text/plain application/javascript text/css;\n   .....\n}\n```\n\n<b>to be continued</b>","tags":["Nginx"]},{"title":"List中add与addAll的区别","url":"/2018/11/09/List中add()与addAll()的区别/","content":"#### 如果有多个已经被实例化的List 集合，想要把他们组合成一个整体，并且，这里必须直接使用List自身提供的一个方法List.addAll()，否则使用了List.add()方法，则会输出不正常的信息。\n\n---\n\n1.<b>List.add()</b>方法，也是往List中增加list，但是，它增加的是一个List实例。如果，往容器中增加的那个List实例从数据库中查到的结果有5条，不过，如果使用了List.add(list1);程序只会输出一条记录。原因就是上面说的。List.add()加List实例，它会把这个看一个实例，而不是把那个看成一个容器。\n\n例如：\n```\nList.add(list1);\nList.add(list2);\nList.add(list3);\n```\n这时，List.size 它的大小是3.\n\n#### List.add() 的含义就是：你往这个List 中添加对象，它就把自己当初一个对象，你往这个List中添加容器，它就把自己当成一个容器。\n\n---\n\n2.<b>List.addAll()</b>方法，就是规定了，自己的这个List就是容器，往里面增加的List实例，增加到里面后，都会被看成对象。\n\n例如：\n```\nList.add(list1);\nList.add(list2);\nList.add(list3);\n```\n这时，List.size 它的大小就是所有list 实例化后的总数和总的记录数.\n\n#### 因此，当需要把多个List 实例放到一起的时候，必须使用List.addAll()方法。\n\n鸣谢：https://blog.csdn.net/c_z_w/article/details/52751264","tags":["JAVA"]},{"title":"JPA中的Page与Pageable","url":"/2018/11/09/JPA中的Page与Pageable/","content":"\n#### RequestPage是Pageable的实现\n\n#### PageImpl<T>是Page<T>的实现\n\nPageImpl(List<T> content, Pageable pageable, long total)\n构造函数PageImpl。\n\n---\n\n<b>Page</b>是Spring Data提供的一个接口，该接口表示一部分数据的集合以及其相关的下一部分数据、数据总数等相关信息，通过该接口，我们可以得到数据的总体信息（数据总数、总页数...）以及当前数据的信息（当前数据的集合、当前页数等）\n\n<b>Pageable</b> 是Spring Data库中定义的一个接口，该接口是所有分页相关信息的一个抽象，通过该接口，我们可以得到和分页相关所有信息（例如pageNumber、pageSize等），这样，Jpa就能够通过pageable参数来得到一个带分页信息的Sql语句。\n\n---\n\nPageable定义了很多方法，但其核心的信息只有两个：\n\n\n#### 一是分页的信息（page、size）\n#### 二是排序的信息。Spring Data Jpa提供了PageRequest的具体实现\n\n---\n\n#### Pageable接口入下：\n\n```\n/**\n * 分页信息抽象接口\n * \n * @author Oliver Gierke\n */\npublic interface Pageable {\n \n\t/**\n\t * 返回要返回的页面.\n\t * \n\t * @return the page to be returned.\n\t */\n\tint getPageNumber();\n \n\t/**\n\t * 返回要返回的项目的数量。\n\t * \n\t * @return the number of items of that page\n\t */\n\tint getPageSize();\n \n\t/**\n\t * 根据底层页面和页面大小返回偏移量。\n\t * \n\t * @return the offset to be taken\n\t */\n\tint getOffset();\n \n\t/**\n\t * 返回排序参数。\n\t * \n\t * @return\n\t */\n\tSort getSort();\n}\n```\n\n#### Page  接口如下:\n\n```\npublic interface Page<T> extends Iterable<T> {\n \n    int getNumber();\t\t\t//当前第几页   返回当前页的数目。总是非负的\n \n    int getSize();\t\t\t\t//返回当前页面的大小。\n \n    int getTotalPages();         //返回分页总数。\n \n    int getNumberOfElements();   //返回当前页上的元素数。\n \n    long getTotalElements();    //返回元素总数。\n \n    boolean hasPreviousPage();  //返回如果有上一页。\n \n    boolean isFirstPage();      //返回当前页是否为第一页。\n \n    boolean hasNextPage();      //返回如果有下一页。\n \n    boolean isLastPage();       //返回当前页是否为最后一页。\n \n    Iterator<T> iterator();\n \n    List<T> getContent();     //将所有数据返回为List\n \n    boolean hasContent();     //返回数据是否有内容。\n \n    Sort getSort();          //返回页的排序参数。\n}\n```","tags":["JPA"]},{"title":"收集了一堆视频解析接口...","url":"/2018/10/06/收集了一堆视频解析接口/","content":"#### 起因：\n无意中看到很久之前做的静态网页...\n\n---\n#### 经过：\n\n那个网页是个视频网页，我就想要不就用这个干脆做个后台吧。于是开始到网上搜视频解析网站看看，发现他们都是解析了视频后台传回源地址给浏览器的，一开始还以为解析接口里会有站长的会员cookie来着，结果碰了一鼻子灰，后来我就想，既然他的后台返回的是源地址，那我就直接伪造他前台的请求直接拿他解析的源地址好了...\n\n---\n\n#### 结果：\nhttp://www.jiexihu.com/\nhttp://yun.baiyug.cn/vip/?url=\nhttps://aip.hackmg.com/index.php?url=\nhttp://api.bbbbbb.me/jx/?url=\nhttps://yun.jxegc.com/vip.php?url=\nhttp://film.qq.com/film_index_prevue/index.html?firstVid=v0027v0lxjz","tags":["api"]},{"title":"在Vue中使用Base64解码获得服务器端jwt加密的payload","url":"/2018/10/06/在vue中使用base64解码获得服务器端jwt加密的payload/","content":"安装\"js-base64\"\n\n```\nnpm install js-base64 --save\n```\n\n在项目中引入\n\n```\nlet Base64 = require('js-base64').Base64;\n```\n\n参照如下：\n\n```\nlet vm = new Object({\n    data() {\n        return{\n            username: 'No User',\n            role: ''\n        }\n    },\n    created() {\n        if(localStorage.getItem('user') == null) {\n            this.username = 'No User'\n            this.role = '';\n        } else {\n            var decodeToken = Base64.decode((JSON.parse(localStorage.getItem('user')).token).split('.')[1])\n            decodeToken = JSON.parse(decodeToken);\n            this.username = decodeToken.username;\n            this.role = decodeToken.role;\n        }\n    },\n//  ...\n});\n\nexport default vm;\n```","tags":["jwt"]},{"title":"(闲的无聊的分享) 科学上网","url":"/2018/09/10/(闲的无聊的分享)_科学上网/","content":"就是你想要的那种。\n链接: https://pan.baidu.com/s/1Gx5Z53R929lhK0aeLBI4uQ\n密码: 7ycy\n解压密码: 我的名字是...(￣▽￣)。\n\n![你的名字](http://wx2.sinaimg.cn/large/005tUZLtly1fv4f1fjze2j31hc0xcnpd.jpg)\n","tags":["闲聊"]},{"title":"线性表的算法题","url":"/2018/09/10/线性表的算法题/","content":"### 已知线性表A的长度为n，并且采用顺序存储结构。写一算法，删除线性表中所有值为x的元素。 ###\n\n这道题的思路是这样的：\n  1.用i循环遍历数组，直到遇到值为'x'的元素，将用来记录x个数的count加1，\n  2.在这个时候用j从这个位置继续往后遍历，因为题目并没说明x是不连续的，所以用j遍历数组直到找到一个不是'x'的元素，\n  3.将j位置的元素和i位置的元素调换位置，也就是把发现的x和后面的第一个非x元素的位置调换一下，这个时候因为算法的原因count记录的个数比原数组中'x'的个数多了一些，多的这些就是调换位置之后再次被i遍历到的'x'，所以应该在发生调换的时候令count减1，这样count就会记录真实的'x'的个数，\n  4.继续遍历数组，重复2、3的过程直到i遍历结束，\n  5.遍历结束后'x'将全部移动到数组末尾，所以只需要将原数组的长度减少count就可以删除数组中全部的'x'。\n\n  ---\n  人家本来让用伪C语言写，但是我刚好在写js所以就用js写了，里面用的方法什么的伪C语言里面也都有，所以应该差不多吧...\n```\n<script>\n    var e = ['1','2','x','x','3','4','5','x','6','x','x','x','7','8','9','0'];  //假定的原始数组\n    var n = e.length;                                                           //数组的长度n = 16\n    var i,j,temp;                                                                  //循环中用到的变量和中间值\n    var count = 0;                                                               //统计'x'的个数\n    for(i = 0; i<=n-1; i++){                                                   //首层for循环遍历e中所有元素\n      if(e[i] == 'x'){                                                               //当e[i]等于'x'时记录此时i的位置，改用j继续遍历知道遇到非'x'的值为止\n        for(j = i; j<=n-1; j++){                                                //用j从i的位置继续遍历数组\n          if(e[j] != 'x'){                                                            //当e[j]不等于'x'时，记录j的位置判断是否已经遍历结束，如果没有结束则将e[j]位置的非'x'值与e[i]位置的'x'调换位置\n            if(j<n){                                                                  //...不想写了...\n              temp = e[i];\n              e[i] = e[j];\n              e[j] = temp;\n              count = count - 1;\n              break;\n            }else if (j==n) {\n              break;\n            }\n          }\n        }\n        count = count + 1;\n      }\n      console.log('e=',e);\n    }\n    console.log('count=',count);\n    e.length -= count;\n    console.log('new e=',e);\n  </script>\n```\n输出结果如下：\n![输出结果](http://wx2.sinaimg.cn/large/005tUZLtly1fv4diziw1gj30mf0b3q47.jpg)\n","tags":["数据结构"]},{"title":"python的一些知识点总结","url":"/2018/09/08/python的一些知识点总结/","content":"# 总结了些知识点在这记录一下 #\n## 一、常用正则表达式符号和语法 ##\n'.' 匹配所有字符串，除\\n以外\n‘-’ 表示范围[0-9]\n'*' 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。\n'+' 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+\n'^' 匹配字符串开头\n‘$’ 匹配字符串结尾 re\n'\\' 转义字符， 使后一个字符改变原来的意思，如果字符串中有字符*需要匹配，可以\\*或者字符集[*] re.findall(r'3\\*','3*ds')结['3*']\n'*' 匹配前面的字符0次或多次 re.findall(\"ab*\",\"cabc3abcbbac\")结果：['ab', 'ab', 'a']\n‘?’ 匹配前一个字符串0次或1次 re.findall('ab?','abcabcabcadf')结果['ab', 'ab', 'ab', 'a']\n'{m}' 匹配前一个字符m次 re.findall('cb{1}','bchbchcbfbcbb')结果['cb', 'cb']\n'{n,m}' 匹配前一个字符n到m次 re.findall('cb{2,3}','bchbchcbfbcbb')结果['cbb']\n'\\d' 匹配数字，等于[0-9] re.findall('\\d','电话:10086')结果['1', '0', '0', '8', '6']\n'\\D' 匹配非数字，等于[^0-9] re.findall('\\D','电话:10086')结果['电', '话', ':']\n'\\w' 匹配字母和数字，等于[A-Za-z0-9] re.findall('\\w','alex123,./;;;')结果['a', 'l', 'e', 'x', '1', '2', '3']\n'\\W' 匹配非英文字母和数字,等于[^A-Za-z0-9] re.findall('\\W','alex123,./;;;')结果[',', '.', '/', ';', ';', ';']\n'\\s' 匹配空白字符 re.findall('\\s','3*ds \\t\\n')结果[' ', '\\t', '\\n']\n'\\S' 匹配非空白字符 re.findall('\\s','3*ds \\t\\n')结果['3', '*', 'd', 's']\n'\\A' 匹配字符串开头\n'\\Z' 匹配字符串结尾\n'\\b' 匹配单词的词首和词尾，单词被定义为一个字母数字序列，因此词尾是用空白符或非字母数字符来表示的\n'\\B' 与\\b相反，只在当前位置不在单词边界时匹配\n'(?P<name>...)' 分组，除了原有编号外在指定一个额外的别名 re.search(\"(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{8})\",\"371481199306143242\").groupdict(\"city\") 结果{'province': '3714', 'city': '81', 'birthday': '19930614'}\n[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\\s*]表示空格或者*号。\n## 二、打开文件时的读写模式 ##\nr\t打开的文件为只读模式。文件指针位于文件的开头，这是默认模式。\nrb\t打开仅用二进制格式读取的文件。文件指针位于文件的开头，这是默认模式。\nr+\t打开读写文件。文件指针放在文件的开头。\nrb+\t以二进制格式打开一个用于读写文件。文件指针放在文件的开头。\nw\t打开仅供写入的文件。 如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。\nwb\t打开仅用二进制格式写入的文件。如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。\nw+\t打开写入和取读的文件。如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。\nwb+\t打开一个二进制格式的写入和读取文件。 如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。\na\t打开一个文件进行追加。 如果文件存在，则文件指针位于文件末尾。也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。\nab\t打开一个二进制格式的文件。如果文件存在，则文件指针位于文件末尾。 也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。\na+\t打开一个文件，用于追加和阅读。 如果文件存在，则文件指针位于文件末尾。 文件以附加模式打开。 如果文件不存在，它将创建一个新文件进行阅读和写入。\nab+\t打开一个二进制格式的附加和读取文件。 如果文件存在，则文件指针位于文件末尾。文件以附加模式打开。如果文件不存在，它将创建一个新文件进行读取和写入。\n## 三、python格式化输出 ##\n### 格式 ###\n[[fill]align][sign][#][0][width][,][.precision][type]\n### 参数 ###\nfill 【可选】空白处填充的字符\nalign 【可选】对齐方式（需配合width使用）\n'<'，内容左对齐\n'>'，内容右对齐(默认)\n＝，内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号+填充物+数字\n，内容居中\nsign 【可选】有无符号数字\n+，正号加正，负号加负；\n-，正号不变，负号加负；\n空格 ，正号空格，负号加负；\n#【可选】对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示\n， 【可选】为数字添加分隔符，如：1,000,000\nwidth 【可选】格式化位所占宽度\n.precision 【可选】小数位保留精度\ntype 【可选】格式化类型\n传入” 字符串类型 “的参数\ns，格式化字符串类型数据\n空白，未指定类型，则默认是None，同s\n传入“ 整数类型 ”的参数\nb，将10进制整数自动转换成2进制表示然后格式化\nc，将10进制整数自动转换为其对应的unicode字符\nd，十进制整数\no，将10进制整数自动转换成8进制表示然后格式化；\nx，将10进制整数自动转换成16进制表示然后格式化（小写x）\nX，将10进制整数自动转换成16进制表示然后格式化（大写X）\n传入“ 浮点型或小数类型 ”的参数\ne， 转换为科学计数法（小写e）表示，然后格式化；\nE， 转换为科学计数法（大写E）表示，然后格式化;\nf ， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；\nF， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；\ng， 自动在e和f中切换\nG， 自动在E和F中切换\n%，显示百分比（默认显示小数点后6位）\n\n用法举例\n```\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n#pyversion:python3.5\n#owner:fuzj\n\nf1 = \"i am {0}, i am {1}d years old\".format('Jeck',26)         #采用位置参数来索引\nf2 = \"i am {name}, i am {age}d years old\".format(**{'name':'jeck','age':26})   #采用自定义key来缩影,此时**表示将字典的k/v取出\nf3 = \"--{name:*^10s}--   =={age:<10.2f}==\".format(name='Jeck',age=26.457)   #将name的宽度设置为10,空余的使用*号不全,并居中显示,age类型设置为浮点型,宽度为10.并左对齐\nf4 = \"原数:{:d}  二进制:{:b}, 八进制:{:o}, 十六进制x:{:x},十六进制X:{:X}\".format(15, 15, 15, 15, 15)   #进制转换\nf5 = \"原数:{:d}, 科学计数法e:{:e}, 科学计数法E:{:E}\" .format(1000000000,1000000000,1000000000)    #科学计数法表示\nf6 = \"原数:{:2F}, 百分号表示{:.2%},  原数:{:d},自动分割表示:{:,}\".format(0.75,0.7584,10000000,10000000 )  #百分号表示及自动分割\n\nprint(f1)\nprint(f2)\nprint(f3)\nprint(f4)\nprint(f5)\nprint(f6)\n```\n\n输出结果：\n```\ni am Jeck, i am 26d years old\ni am jeck, i am 26d years old\n--***Jeck***--   ==26.46     ==\n原数:15  二进制:1111, 八进制:17, 十六进制x:f,十六进制X:F\n原数:1000000000, 科学计数法e:1.000000e+09, 科学计数法E:1.000000E+09\n原数:0.750000, 百分号表示75.84%,  原数:10000000,自动分割表示:10,000,000\n```\n![](https://i.loli.net/2018/09/09/5b94bfe85fbea.jpg)\n","tags":["python"]},{"title":"for循环中i++和++i的区别","url":"/2018/09/07/for循环中i++和++i的区别/","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <div>\n    <p>顺便尝试html能否写在博客内</p>\n    <h3>(输出结果在控制台)</h3>\n    <p>---------------------------------------</p>\n    <p>在for中第三个元素中使用时效果————完全一样~</p>\n    <p>i++和++i在独立使用时效果是完全一样的</p>\n    <p>本来是想验证某线性表的结果</p>\n    <p>输出大概长这样：</p>\n    <pre>\n      i is : 5\n      i is : 4\n      i is : 3\n      i is : 2\n      i2 is : 5\n      i2 is : 4\n      i2 is : 3\n      i2 is : 2\n      length is : 7\n      l is : Array(10)\n        0: 1\n        1: 2\n        2: 9\n        3: 3\n        4: 3\n        5: 4\n        6: 5\n        length: 10\n        __proto__: Array(0)</pre>\n  </div>\n    <p>js长这样：</p>\n  <script>\n\n  var ll=new Array(10);\n  ll[0]=1\n  ll[1]=2\n  ll[2]=3\n  ll[3]=4\n  ll[4]=5\n  ll[5]=6\n  length = 6;\n\n  function insert(l){\n    var p,i,i2;\n    p = 2;\n    for(i = length-1; i>=p; --i){\n      l[i+1]=l[i];\n      console.log(\"i is :\",i);\n    }\n    for(i2 = length-1; i2>=p; i2--){\n      l[i2+1]=l[i2];\n      console.log(\"i2 is :\",i2);\n    }\n    l[p]=9;\n    length = length +1;\n    console.log(\"length is :\",length);\n    console.log(\"l is :\",l);\n  }\n\n  insert(ll);\n  </script>\n</body>\n</html>\n\n```\n<script>\n/*\nvar ll=new Array(10);\nll[0]=1\nll[1]=2\nll[2]=3\nll[3]=4\nll[4]=5\nll[5]=6\nlength = 6;\n\nfunction insert(l){\n  var p,i,i2;\n  p = 2;\n  for(i = length-1; i>=p; --i){\n    l[i+1]=l[i];\n    console.log(\"i is :\",i);\n  }\n  for(i2 = length-1; i2>=p; i2--){\n    l[i2+1]=l[i2];\n    console.log(\"i2 is :\",i2);\n  }\n  l[p]=9;\n  length = length +1;\n  console.log(\"length is :\",length);\n  console.log(\"l is :\",l);\n}\n\ninsert(ll);\n*/\n</script>\n```\n","tags":["数据结构"]},{"title":"python爬虫的简单实现","url":"/2018/09/07/python爬虫的简单实现/","content":"新手嘛，爬虫当然是最简单最容易学的吧~我是这么以为的，学了两天，做了这么个东西~\n网上的都比较喜欢爬这个小说网站http://www.biqugecom.com/ ,试一下咯~\n```\nfrom bs4 import BeautifulSoup\nimport re\nimport requests\nimport sys\nimport time\nimport random\n#目前有效20180907\n#先在D盘建一个叫aaa的文件夹\n\n#全局变量\nyuanshiurl = 'http://www.biqugecom.com/1/'#原始url\nxinurl = ''#新url\nsoupshuming = ''#小说名字\nsoupnext = ''#下一章地址\nopenshuhao = '13503'#书号\nzhangshu = 1#章数\n\n#交互\nprint('请输入想要下载的小说的书号：')\nopenshuhao = input()\nif openshuhao == '':\n     print('未检测到书号，系统将随机抽取')\n     openshuhao = str(random.randint(1,15000))\n     #openshuhao = str('13503')\nprint('下载书号：'+str(openshuhao))\nprint('即将开始下载,请耐心等待...')\n\n#初始化方法\ndef chushihua(shuhao):\n     global soupnext\n     global soupshuming\n     global openshuhao\n     global zhangshu\n     url = yuanshiurl+str(shuhao)+'/'\n     r = requests.get(url)\n     r.encoding = 'gbk'\n     soup = BeautifulSoup(r.text,'html.parser')\n     soupshuming = soup.select('#info h1')[0].text#小说名字\n     soupzuozhe = soup.select('#info p')[0].text#作者名字\n     soupzuihougengxin = soup.select('#info p')[2].text#最后更新时间\n     soupjianjie = soup.select('#intro')[0].text#最后更新时间\n     soupzhengwen = soup.select('dd')[9].next_siblings\n     soupz = ''\n     for zs in soupzhengwen:\n          soupz +=str(zs)\n     soupzw = BeautifulSoup(soupz,'html.parser')\n     zhangshu = len(soupzw.select('dd a'))\n     #写入txt\n     f = open('D:\\\\aaa\\\\'+soupshuming+'.txt','ab+')\n     f.write((str(soupshuming) + '\\r\\n').encode('UTF-8'))\n     f.write((str(soupzuozhe) + '\\r\\n').encode('UTF-8'))\n     f.write((str(soupzuihougengxin) + '\\r\\n').encode('UTF-8'))\n     f.write(('****简介****\\r\\n').encode('UTF-8'))\n     f.write((str(soupjianjie) + '\\r\\n').encode('UTF-8'))\n     f.write(('*************\\r\\n\\r\\n').encode('UTF-8'))\n     f.close()\n     soupnext = soup.select('dd a')[9]['href'].split('/')[3]#第一章地址\n     print('开始下载：'+soupshuming)\n     print('总章数：'+str(zhangshu))\n     print('简介：'+str(soupjianjie))\nchushihua(openshuhao)\n\n#单章下载方法\ndef downloadxs():\n     global soupnext\n     r =  requests.get(xinurl)\n     r.encoding = 'gbk'\n     soup = BeautifulSoup(r.text,'html.parser')\n     soupname = soup.select('.bookname h1')[0].text#章节名称\n     souptext = soup.select('#content')[0]#章节内容\n     for ss in souptext.select(\"script\"):\n          ss.decompose()\n     for ss in souptext.select(\"a\"):\n          ss.decompose()\n     #soupnext = soup.select('#pager_next')[0]['href']#下一章地址\n     soupnext = soup.select('.bottem1 a')[2]['href']#下一章地址\n     souptext = re.sub('\\s+' ,'\\r\\n\\t', souptext.text).strip('\\r\\n')\n     f = open('D:\\\\aaa\\\\'+soupshuming+'.txt','ab+')\n     f.write((str(soupname) + '\\r\\n').encode('UTF-8'))\n     f.write((str(souptext) + '\\r\\n').encode('UTF-8'))\n     f.close()\n\n#拼接url方法\ndef pinjieurl(shuhao):\n     global xinurl\n     xinurl = yuanshiurl+str(shuhao)+'/'+str(soupnext)\npinjieurl(openshuhao)\n\n#下载\ndef main():\n     for i in range(zhangshu):\n          pinjieurl(openshuhao)\n          downloadxs()\n          time.sleep(0.5)\n          print('\\r下载中：'+str(round(((100/zhangshu)*i),2))+'%，已下载：'+str(i+1)+'章', end='')\n          sys.stdout.flush()\nmain()\n\n\n```\n辣鸡爬虫，只能爬这一个网站，不过原理都是相同的吧（雾）。\n\n![](https://user-images.githubusercontent.com/33678058/45262625-d8a4e700-b44c-11e8-8641-5cca539f6d2e.jpg)\n","tags":["BeautifulSoup"]},{"title":"第一篇博客","url":"/2018/09/06/第一篇博客/","content":"\n空闲时被安利来写博客, 我是什么水平我自己还不知道吗(╯°□°)╯︵ ┻━┻, \n写优质文章是不可能写优质文章的, 学还没学会, 就是看看别人的博客, 然后写写感悟这样子...\n\n\n![](http://wx2.sinaimg.cn/large/005tUZLtly1fv39ry35pxj33zs2gwe81.jpg)\n","tags":["闲聊"]}]