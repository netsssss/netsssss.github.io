[{"title":"test2","url":"/2018/09/16/test2/","content":"\n112332323"},{"title":"test","url":"/2018/09/16/test/","content":"tttest..."},{"title":"(闲的无聊的分享) 科学上网","url":"/2018/09/10/(闲的无聊的分享)_科学上网/","content":"就是你想要的那种。\n链接: https://pan.baidu.com/s/1Gx5Z53R929lhK0aeLBI4uQ\n密码: 7ycy\n解压密码: 我的名字是...(￣▽￣)。\n\n![你的名字](http://wx2.sinaimg.cn/large/005tUZLtly1fv4f1fjze2j31hc0xcnpd.jpg)\n","tags":["闲聊"]},{"title":"线性表的算法尝试","url":"/2018/09/10/线性表的算法尝试/","content":"### 已知线性表A的长度为n，并且采用顺序存储结构。写一算法，删除线性表中所有值为x的元素。 ###\n\n这是某数据结构线性表考研题，乍一看挺简单的，嗯..其实也挺简单的，人家让用伪C语言写，然而我并不会，只能用js写写了，尝试一些新算法，记录一下。\n\n### 我认为使用什么语言不重要，重要的是思路。 ###\n```\n<script>\n    var e = ['1','2','x','x','3','4','5','x','6','x','x','x','7','8','9','0'];  //假定的原始数组\n    var n = e.length;                                                           //数组的长度n = 16\n    var i,j,temp;                                                                  //循环中用到的变量和中间值\n    var count = 0;                                                               //统计'x'的个数\n    for(i = 0; i<=n-1; i++){                                                   //首层for循环遍历e中所有元素\n      if(e[i] == 'x'){                                                               //当e[i]等于'x'时记录此时i的位置，改用j继续遍历知道遇到非'x'的值为止\n        for(j = i; j<=n-1; j++){                                                //用j从i的位置继续遍历数组\n          if(e[j] != 'x'){                                                            //当e[j]不等于'x'时，记录j的位置判断是否已经遍历结束，如果没有结束则将e[j]位置的非'x'值与e[i]位置的'x'调换位置\n            if(j<n){                                                                  //...不想写了...\n              temp = e[i];\n              e[i] = e[j];\n              e[j] = temp;\n              count = count - 1;\n              break;\n            }else if (j==n) {\n              break;\n            }\n          }\n        }\n        count = count + 1;\n      }\n      console.log('e=',e);\n    }\n    console.log('count=',count);\n    e.length -= count;\n    console.log('new e=',e);\n  </script>\n```\n输出结果如下：\n![输出结果](http://wx2.sinaimg.cn/large/005tUZLtly1fv4diziw1gj30mf0b3q47.jpg)\n","tags":["数据结构"]},{"title":"python的一些知识点总结","url":"/2018/09/08/python的一些知识点总结/","content":"# 总结了些知识点在这记录一下 #\n## 一、常用正则表达式符号和语法 ##\n'.' 匹配所有字符串，除\\n以外\n‘-’ 表示范围[0-9]\n'*' 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。\n'+' 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+\n'^' 匹配字符串开头\n‘$’ 匹配字符串结尾 re\n'\\' 转义字符， 使后一个字符改变原来的意思，如果字符串中有字符*需要匹配，可以\\*或者字符集[*] re.findall(r'3\\*','3*ds')结['3*']\n'*' 匹配前面的字符0次或多次 re.findall(\"ab*\",\"cabc3abcbbac\")结果：['ab', 'ab', 'a']\n‘?’ 匹配前一个字符串0次或1次 re.findall('ab?','abcabcabcadf')结果['ab', 'ab', 'ab', 'a']\n'{m}' 匹配前一个字符m次 re.findall('cb{1}','bchbchcbfbcbb')结果['cb', 'cb']\n'{n,m}' 匹配前一个字符n到m次 re.findall('cb{2,3}','bchbchcbfbcbb')结果['cbb']\n'\\d' 匹配数字，等于[0-9] re.findall('\\d','电话:10086')结果['1', '0', '0', '8', '6']\n'\\D' 匹配非数字，等于[^0-9] re.findall('\\D','电话:10086')结果['电', '话', ':']\n'\\w' 匹配字母和数字，等于[A-Za-z0-9] re.findall('\\w','alex123,./;;;')结果['a', 'l', 'e', 'x', '1', '2', '3']\n'\\W' 匹配非英文字母和数字,等于[^A-Za-z0-9] re.findall('\\W','alex123,./;;;')结果[',', '.', '/', ';', ';', ';']\n'\\s' 匹配空白字符 re.findall('\\s','3*ds \\t\\n')结果[' ', '\\t', '\\n']\n'\\S' 匹配非空白字符 re.findall('\\s','3*ds \\t\\n')结果['3', '*', 'd', 's']\n'\\A' 匹配字符串开头\n'\\Z' 匹配字符串结尾\n'\\b' 匹配单词的词首和词尾，单词被定义为一个字母数字序列，因此词尾是用空白符或非字母数字符来表示的\n'\\B' 与\\b相反，只在当前位置不在单词边界时匹配\n'(?P<name>...)' 分组，除了原有编号外在指定一个额外的别名 re.search(\"(?P<province>[0-9]{4})(?P<city>[0-9]{2})(?P<birthday>[0-9]{8})\",\"371481199306143242\").groupdict(\"city\") 结果{'province': '3714', 'city': '81', 'birthday': '19930614'}\n[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\\s*]表示空格或者*号。\n## 二、打开文件时的读写模式 ##\nr\t打开的文件为只读模式。文件指针位于文件的开头，这是默认模式。\nrb\t打开仅用二进制格式读取的文件。文件指针位于文件的开头，这是默认模式。\nr+\t打开读写文件。文件指针放在文件的开头。\nrb+\t以二进制格式打开一个用于读写文件。文件指针放在文件的开头。\nw\t打开仅供写入的文件。 如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。\nwb\t打开仅用二进制格式写入的文件。如果文件存在，则覆盖该文件。 如果文件不存在，则创建一个新文件进行写入。\nw+\t打开写入和取读的文件。如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。\nwb+\t打开一个二进制格式的写入和读取文件。 如果文件存在，则覆盖现有文件。 如果文件不存在，创建一个新文件进行阅读和写入。\na\t打开一个文件进行追加。 如果文件存在，则文件指针位于文件末尾。也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。\nab\t打开一个二进制格式的文件。如果文件存在，则文件指针位于文件末尾。 也就是说，文件处于追加模式。如果文件不存在，它将创建一个新文件进行写入。\na+\t打开一个文件，用于追加和阅读。 如果文件存在，则文件指针位于文件末尾。 文件以附加模式打开。 如果文件不存在，它将创建一个新文件进行阅读和写入。\nab+\t打开一个二进制格式的附加和读取文件。 如果文件存在，则文件指针位于文件末尾。文件以附加模式打开。如果文件不存在，它将创建一个新文件进行读取和写入。\n## 三、python格式化输出 ##\n### 格式 ###\n[[fill]align][sign][#][0][width][,][.precision][type]\n### 参数 ###\nfill 【可选】空白处填充的字符\nalign 【可选】对齐方式（需配合width使用）\n'<'，内容左对齐\n'>'，内容右对齐(默认)\n＝，内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号+填充物+数字\n，内容居中\nsign 【可选】有无符号数字\n+，正号加正，负号加负；\n-，正号不变，负号加负；\n空格 ，正号空格，负号加负；\n#【可选】对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示\n， 【可选】为数字添加分隔符，如：1,000,000\nwidth 【可选】格式化位所占宽度\n.precision 【可选】小数位保留精度\ntype 【可选】格式化类型\n传入” 字符串类型 “的参数\ns，格式化字符串类型数据\n空白，未指定类型，则默认是None，同s\n传入“ 整数类型 ”的参数\nb，将10进制整数自动转换成2进制表示然后格式化\nc，将10进制整数自动转换为其对应的unicode字符\nd，十进制整数\no，将10进制整数自动转换成8进制表示然后格式化；\nx，将10进制整数自动转换成16进制表示然后格式化（小写x）\nX，将10进制整数自动转换成16进制表示然后格式化（大写X）\n传入“ 浮点型或小数类型 ”的参数\ne， 转换为科学计数法（小写e）表示，然后格式化；\nE， 转换为科学计数法（大写E）表示，然后格式化;\nf ， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；\nF， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；\ng， 自动在e和f中切换\nG， 自动在E和F中切换\n%，显示百分比（默认显示小数点后6位）\n\n用法举例\n```\n#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n#pyversion:python3.5\n#owner:fuzj\n\nf1 = \"i am {0}, i am {1}d years old\".format('Jeck',26)         #采用位置参数来索引\nf2 = \"i am {name}, i am {age}d years old\".format(**{'name':'jeck','age':26})   #采用自定义key来缩影,此时**表示将字典的k/v取出\nf3 = \"--{name:*^10s}--   =={age:<10.2f}==\".format(name='Jeck',age=26.457)   #将name的宽度设置为10,空余的使用*号不全,并居中显示,age类型设置为浮点型,宽度为10.并左对齐\nf4 = \"原数:{:d}  二进制:{:b}, 八进制:{:o}, 十六进制x:{:x},十六进制X:{:X}\".format(15, 15, 15, 15, 15)   #进制转换\nf5 = \"原数:{:d}, 科学计数法e:{:e}, 科学计数法E:{:E}\" .format(1000000000,1000000000,1000000000)    #科学计数法表示\nf6 = \"原数:{:2F}, 百分号表示{:.2%},  原数:{:d},自动分割表示:{:,}\".format(0.75,0.7584,10000000,10000000 )  #百分号表示及自动分割\n\nprint(f1)\nprint(f2)\nprint(f3)\nprint(f4)\nprint(f5)\nprint(f6)\n```\n\n输出结果：\n```\ni am Jeck, i am 26d years old\ni am jeck, i am 26d years old\n--***Jeck***--   ==26.46     ==\n原数:15  二进制:1111, 八进制:17, 十六进制x:f,十六进制X:F\n原数:1000000000, 科学计数法e:1.000000e+09, 科学计数法E:1.000000E+09\n原数:0.750000, 百分号表示75.84%,  原数:10000000,自动分割表示:10,000,000\n```\n![](https://i.loli.net/2018/09/09/5b94bfe85fbea.jpg)\n","tags":["python"]},{"title":"for循环中i++和++i的区别","url":"/2018/09/07/for循环中i++和++i的区别/","content":"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Document</title>\n</head>\n<body>\n  <div>\n    <p>顺便尝试html能否写在博客内</p>\n    <h3>(输出结果在控制台)</h3>\n    <p>---------------------------------------</p>\n    <p>在for中第三个元素中使用时效果————完全一样~</p>\n    <p>i++和++i在独立使用时效果是完全一样的</p>\n    <p>本来是想验证某线性表的结果</p>\n    <p>输出大概长这样：</p>\n    <pre>\n      i is : 5\n      i is : 4\n      i is : 3\n      i is : 2\n      i2 is : 5\n      i2 is : 4\n      i2 is : 3\n      i2 is : 2\n      length is : 7\n      l is : Array(10)\n        0: 1\n        1: 2\n        2: 9\n        3: 3\n        4: 3\n        5: 4\n        6: 5\n        length: 10\n        __proto__: Array(0)</pre>\n  </div>\n    <p>js长这样：</p>\n  <script>\n\n  var ll=new Array(10);\n  ll[0]=1\n  ll[1]=2\n  ll[2]=3\n  ll[3]=4\n  ll[4]=5\n  ll[5]=6\n  length = 6;\n\n  function insert(l){\n    var p,i,i2;\n    p = 2;\n    for(i = length-1; i>=p; --i){\n      l[i+1]=l[i];\n      console.log(\"i is :\",i);\n    }\n    for(i2 = length-1; i2>=p; i2--){\n      l[i2+1]=l[i2];\n      console.log(\"i2 is :\",i2);\n    }\n    l[p]=9;\n    length = length +1;\n    console.log(\"length is :\",length);\n    console.log(\"l is :\",l);\n  }\n\n  insert(ll);\n  </script>\n</body>\n</html>\n\n```\n<script>\n/*\nvar ll=new Array(10);\nll[0]=1\nll[1]=2\nll[2]=3\nll[3]=4\nll[4]=5\nll[5]=6\nlength = 6;\n\nfunction insert(l){\n  var p,i,i2;\n  p = 2;\n  for(i = length-1; i>=p; --i){\n    l[i+1]=l[i];\n    console.log(\"i is :\",i);\n  }\n  for(i2 = length-1; i2>=p; i2--){\n    l[i2+1]=l[i2];\n    console.log(\"i2 is :\",i2);\n  }\n  l[p]=9;\n  length = length +1;\n  console.log(\"length is :\",length);\n  console.log(\"l is :\",l);\n}\n\ninsert(ll);\n*/\n</script>\n```\n","tags":["数据结构"]},{"title":"python爬虫的简单实现","url":"/2018/09/07/python爬虫的简单实现/","content":"新手嘛，爬虫当然是最简单最容易学的吧~我是这么以为的，学了两天，做了这么个东西~\n网上的都比较喜欢爬这个小说网站http://www.biqugecom.com/ ,试一下咯~\n```\nfrom bs4 import BeautifulSoup\nimport re\nimport requests\nimport sys\nimport time\nimport random\n#目前有效20180907\n#先在D盘建一个叫aaa的文件夹\n\n#全局变量\nyuanshiurl = 'http://www.biqugecom.com/1/'#原始url\nxinurl = ''#新url\nsoupshuming = ''#小说名字\nsoupnext = ''#下一章地址\nopenshuhao = '13503'#书号\nzhangshu = 1#章数\n\n#交互\nprint('请输入想要下载的小说的书号：')\nopenshuhao = input()\nif openshuhao == '':\n     print('未检测到书号，系统将随机抽取')\n     openshuhao = str(random.randint(1,15000))\n     #openshuhao = str('13503')\nprint('下载书号：'+str(openshuhao))\nprint('即将开始下载,请耐心等待...')\n\n#初始化方法\ndef chushihua(shuhao):\n     global soupnext\n     global soupshuming\n     global openshuhao\n     global zhangshu\n     url = yuanshiurl+str(shuhao)+'/'\n     r = requests.get(url)\n     r.encoding = 'gbk'\n     soup = BeautifulSoup(r.text,'html.parser')\n     soupshuming = soup.select('#info h1')[0].text#小说名字\n     soupzuozhe = soup.select('#info p')[0].text#作者名字\n     soupzuihougengxin = soup.select('#info p')[2].text#最后更新时间\n     soupjianjie = soup.select('#intro')[0].text#最后更新时间\n     soupzhengwen = soup.select('dd')[9].next_siblings\n     soupz = ''\n     for zs in soupzhengwen:\n          soupz +=str(zs)\n     soupzw = BeautifulSoup(soupz,'html.parser')\n     zhangshu = len(soupzw.select('dd a'))\n     #写入txt\n     f = open('D:\\\\aaa\\\\'+soupshuming+'.txt','ab+')\n     f.write((str(soupshuming) + '\\r\\n').encode('UTF-8'))\n     f.write((str(soupzuozhe) + '\\r\\n').encode('UTF-8'))\n     f.write((str(soupzuihougengxin) + '\\r\\n').encode('UTF-8'))\n     f.write(('****简介****\\r\\n').encode('UTF-8'))\n     f.write((str(soupjianjie) + '\\r\\n').encode('UTF-8'))\n     f.write(('*************\\r\\n\\r\\n').encode('UTF-8'))\n     f.close()\n     soupnext = soup.select('dd a')[9]['href'].split('/')[3]#第一章地址\n     print('开始下载：'+soupshuming)\n     print('总章数：'+str(zhangshu))\n     print('简介：'+str(soupjianjie))\nchushihua(openshuhao)\n\n#单章下载方法\ndef downloadxs():\n     global soupnext\n     r =  requests.get(xinurl)\n     r.encoding = 'gbk'\n     soup = BeautifulSoup(r.text,'html.parser')\n     soupname = soup.select('.bookname h1')[0].text#章节名称\n     souptext = soup.select('#content')[0]#章节内容\n     for ss in souptext.select(\"script\"):\n          ss.decompose()\n     for ss in souptext.select(\"a\"):\n          ss.decompose()\n     #soupnext = soup.select('#pager_next')[0]['href']#下一章地址\n     soupnext = soup.select('.bottem1 a')[2]['href']#下一章地址\n     souptext = re.sub('\\s+' ,'\\r\\n\\t', souptext.text).strip('\\r\\n')\n     f = open('D:\\\\aaa\\\\'+soupshuming+'.txt','ab+')\n     f.write((str(soupname) + '\\r\\n').encode('UTF-8'))\n     f.write((str(souptext) + '\\r\\n').encode('UTF-8'))\n     f.close()\n\n#拼接url方法\ndef pinjieurl(shuhao):\n     global xinurl\n     xinurl = yuanshiurl+str(shuhao)+'/'+str(soupnext)\npinjieurl(openshuhao)\n\n#下载\ndef main():\n     for i in range(zhangshu):\n          pinjieurl(openshuhao)\n          downloadxs()\n          time.sleep(0.5)\n          print('\\r下载中：'+str(round(((100/zhangshu)*i),2))+'%，已下载：'+str(i+1)+'章', end='')\n          sys.stdout.flush()\nmain()\n\n\n```\n辣鸡爬虫，只能爬这一个网站，不过原理都是相同的吧（雾）。\n\n![](https://user-images.githubusercontent.com/33678058/45262625-d8a4e700-b44c-11e8-8641-5cca539f6d2e.jpg)\n","tags":["BeautifulSoup"]},{"title":"第一篇博客","url":"/2018/09/06/第一篇博客/","content":"\n这我写的第一篇博客，以前在网上一直是一个伸手党看别人的博客，终于到了自己写博客的时候了，感触蛮多的...虽然之后还是一个伸手党，还是要看别人写的博客，虽然我的博客也没人看...不过记录一下自己的学习生活应该也挺有意思的吧~\n![](http://wx2.sinaimg.cn/large/005tUZLtly1fv39ry35pxj33zs2gwe81.jpg)\n","tags":["闲聊"]},{"title":"Hello World","url":"/2018/09/06/hello-world/","content":"\n![](https://portablehexo.bitmoe.cn/hexopp/hexop.png)\n\n>**本版本仅适用于Win环境**\n>本文关键字： **Hexo绿色版**，**Hexo便携版**，**Hexo配置**，**Hexo**，**U盘**\n\n[Hexo](https://hexo.io/)是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。\n\n但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。\n\n所以呢，锵锵，我们整合了一个 Hexo 便携版，来简化本地环境的部署。\n\n####**版本介绍**\n那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成的不需要安装的版本。\n\n本便携版（Release 1.0.0）所包含的软件如下：\n>- Git: 2.7.4\n>- Nodejs: 6.10.1\n>- Npm: 4.4.1\n>- Hexo: 3.2.2\n\n为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理文件，下文将详细介绍。\n\n####**从零开始，1分钟搭建Hexo写作环境**\n说了这么多，我们这就开始教你如何在1分钟内，从零开始搭建Hexo写作环境！\n\n#####1 注册一个Github帐号\n\n1.1 进入[Github](https://github.com)，并在右边的3个框框中分别填写 用户名、邮箱地址、账户密码，并点击 **`Sign up for Github`**;\n\n![图1.1.1](https://portablehexo.bitmoe.cn/hexopp/hexop2.png)\n\n1.2 进入欢迎页面后，点击**`Finish sign up`**;\n\n![图1.2.1](https://portablehexo.bitmoe.cn/hexopp/hexop3.png)\n\n1.3 进入到这一步之后（**图1.3.1**），先别记着点任何东西，查看你的邮箱，应该会收到如下的邮件（**图1.3.2**），确认你的邮件。否则，你会看到错误页面（**图1.3.3**）。query完毕之后在**图1.3.1**所示的页面，点击**`+ New repository`**;\n\n![图1.3.1](https://portablehexo.bitmoe.cn/hexopp/hexop5.png)\n\n![图1.3.2](https://portablehexo.bitmoe.cn/hexopp/hexop6.png)\n\n![图1.3.3](https://portablehexo.bitmoe.cn/hexopp/hexop7.png)\n\n1.4 请在红框中的 **`Repository name`** 里面输入 **`用户名.github.io`** ( **用户名** 就是你刚刚 **步骤1.1** 中注册的用户名)，然后点击 **`Create repository`**;\n\n![图1.4.1](https://portablehexo.bitmoe.cn/hexopp/hexop8.png)\n\n1.5 至此，Github网页注册的部分完毕\n\n####2 下载HEXO Portable\n\n2.1 访问我们的 [HEXO Portable](https://project.bitmoe.cn/PortableHexo/) 页面，或者 [Github仓库](https://github.com/Bitmoe/PortableHexo) 下载最新的便携版；\n\n2.2 双击得到的自解压文件，解压到你需要安装博客的地方，可以选择硬盘或者U盘；\n\n####3 配置你的环境\n\n3.1 在你的博客的文件夹，你会发现很多批处理文件，我先介绍下各个文件的用途：\n>- 配置基本信息 >> 配置博客的基本环境\n>- 配置Github部署 >> 配置博客的部署\n>- 启动命令行 >> 启动带环境变量的Git-Bash，否则无法使用node、npm、git等命令\n>- 新建文章 >> 新建一篇文章\n>- 渲染并本地测试 >> 生成并本地预览\n>- 渲染并部署 >> 生成并部署到GitHub\n>- 重置配置文件 >> 重置_config.yml\n\n3.2 我们继续进行环境配置，双击**`配置基本信息`**并按顺序输入以下信息：\n>- 主标题：顾名思义\n>- 副标题：顾名思义\n>- 描述：顾名思义\n>- 作者：顾名思义\n>- 网站地址：填写 **用户名.github.io** （此处的用户名为**步骤1.1**中填写的用户名）\n**如果您已经购买了域名，可以参看相关的文章！**\n\n3.3 双击**`配置Github部署`**并按顺序输入以下信息：\n>- Github的用户名：此处的用户名为**步骤1.1**中填写的用户名\n>- Github注册邮箱：此处的注册邮箱为**步骤1.1**中填写的注册邮箱\n\n3.4 输入完毕之后，会进行测试部署，等待屏幕提示**下面将进行部署测试，稍后将有一个openssh的对话框出现，请输入你的github用户密码。**的时候，按回车继续；（此处的用户密码为**步骤1.1**中填写的用户密码）\n\n3.5 然后继续等待，此时屏幕会出现n多行，耐心等待即可；\n\n3.6 等待屏幕提示**请访问 https://用户名.github.io 查看是否部署成功！**的时候，在浏览器中输入**https://用户名.github.io **，理论上可以看到你的Hexo站点！（此处的用户名为**步骤1.1**中填写的用户名）\n\n3.7 至此，你的Hexo环境就配置完成了，这样你的这个Hexo博客文件夹无论移动到哪一台电脑，都能通过**启动命令行**出现的bash命令行，或者其余便捷的批处理文件比如**新建文章**、**渲染并本地测试**、**渲染并部署**进行相应的操作。\n\n3.8 如果你在配置中出错，可以运行**重置配置文件**后，再重复**3.1~3.6步骤**\n\n####4 开始享受纯粹的Hexo写作吧！\n\n####5 备注\n>- 本便携版以及本文均使用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by/4.0/)协议；\n>- 本文所有权归 [QistChan](http://qistchan.com) & [Bitmoe Inc.](https://wwww.bitmoe.com) 所有；\n>- 本便携版由 [Bitmoe Inc.](https://www.bitmoe.com) 维护并提供技术支持；\n>- 需要技术支持可以在[Github仓库](https://github.com/Bitmoe/PortableHexo) 提交**`Issues`**；\n>-  Written with [StackEdit](https://stackedit.io/)."}]